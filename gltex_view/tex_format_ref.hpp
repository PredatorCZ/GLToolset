#include "spike/reflect/reflector.hpp"
#include <GL/gl.h>
#include <GL/glext.h>

MAKE_ENUM(ENUMSCOPE(class CompressedFormats
                    : uint16, CompressedFormats),
          EMEMBERVAL(BC1, GL_COMPRESSED_RGB_S3TC_DXT1_EXT),
          EMEMBERVAL(BC1A, GL_COMPRESSED_RGBA_S3TC_DXT1_EXT),
          EMEMBERVAL(BC2, GL_COMPRESSED_RGBA_S3TC_DXT3_EXT),
          EMEMBERVAL(BC3, GL_COMPRESSED_RGBA_S3TC_DXT5_EXT),
          EMEMBERVAL(BC4, GL_COMPRESSED_RED_RGTC1),
          EMEMBERVAL(BC5, GL_COMPRESSED_RG_RGTC2),
          EMEMBERVAL(BC4S, GL_COMPRESSED_SIGNED_RED_RGTC1),
          EMEMBERVAL(BC5S, GL_COMPRESSED_SIGNED_RG_RGTC2),
          EMEMBERVAL(BC7, GL_COMPRESSED_RGBA_BPTC_UNORM));

uint16 texture2DTargets[]{
    GL_TEXTURE_2D,
    // GL_PROXY_TEXTURE_2D,
    GL_TEXTURE_1D_ARRAY,
    // GL_PROXY_TEXTURE_1D_ARRAY,
    GL_TEXTURE_RECTANGLE,
    // GL_PROXY_TEXTURE_RECTANGLE,
    GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X,
    GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y,
    GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z,
    // GL_PROXY_TEXTURE_CUBE_MAP,
};

uint16 texture2DFormats[]{
    GL_RED,           GL_RG,
    GL_RGB,           GL_BGR,
    GL_RGBA,          GL_BGRA,
    GL_RED_INTEGER,   GL_RG_INTEGER,
    GL_RGB_INTEGER,   GL_BGR_INTEGER,
    GL_RGBA_INTEGER,  GL_BGRA_INTEGER,
    GL_STENCIL_INDEX, GL_DEPTH_COMPONENT,
    GL_DEPTH_STENCIL,
};

uint16 texture2DTypes[]{
    GL_UNSIGNED_BYTE,
    GL_BYTE,
    GL_UNSIGNED_SHORT,
    GL_SHORT,
    GL_UNSIGNED_INT,
    GL_INT,
    GL_HALF_FLOAT,
    GL_FLOAT,
    GL_UNSIGNED_BYTE_3_3_2,
    GL_UNSIGNED_BYTE_2_3_3_REV,
    GL_UNSIGNED_SHORT_5_6_5,
    GL_UNSIGNED_SHORT_5_6_5_REV,
    GL_UNSIGNED_SHORT_4_4_4_4,
    GL_UNSIGNED_SHORT_4_4_4_4_REV,
    GL_UNSIGNED_SHORT_5_5_5_1,
    GL_UNSIGNED_SHORT_1_5_5_5_REV,
    GL_UNSIGNED_INT_8_8_8_8,
    GL_UNSIGNED_INT_8_8_8_8_REV,
    GL_UNSIGNED_INT_10_10_10_2,
    GL_UNSIGNED_INT_2_10_10_10_REV,
};

MAKE_ENUM(ENUMSCOPE(class InternalFormats
                    : uint16, InternalFormats),
          /**/ //
    EMEMBERVAL(DEPTH_COMPONENT,GL_DEPTH_COMPONENT),
    EMEMBERVAL(DEPTH_STENCIL,GL_DEPTH_STENCIL),
    EMEMBERVAL(RED,GL_RED),
    EMEMBERVAL(RG,GL_RG),
    EMEMBERVAL(RGB,GL_RGB),
    EMEMBERVAL(RGBA,GL_RGBA),
    EMEMBERVAL(R8,GL_R8),
    EMEMBERVAL(R8_SNORM,GL_R8_SNORM),
    EMEMBERVAL(R16,GL_R16),
    EMEMBERVAL(R16_SNORM,GL_R16_SNORM),
    EMEMBERVAL(RG8,GL_RG8),
    EMEMBERVAL(RG8_SNORM,GL_RG8_SNORM),
    EMEMBERVAL(RG16,GL_RG16),
    EMEMBERVAL(RG16_SNORM,GL_RG16_SNORM),
    EMEMBERVAL(R3_G3_B2,GL_R3_G3_B2),
    EMEMBERVAL(RGB4,GL_RGB4),
    EMEMBERVAL(RGB5,GL_RGB5),
    EMEMBERVAL(RGB8,GL_RGB8),
    EMEMBERVAL(RGB8_SNORM,GL_RGB8_SNORM),
    EMEMBERVAL(RGB10,GL_RGB10),
    EMEMBERVAL(RGB12,GL_RGB12),
    EMEMBERVAL(RGB16_SNORM,GL_RGB16_SNORM),
    EMEMBERVAL(RGBA2,GL_RGBA2),
    EMEMBERVAL(RGBA4,GL_RGBA4),
    EMEMBERVAL(RGB5_A1,GL_RGB5_A1),
    EMEMBERVAL(RGBA8,GL_RGBA8),
    EMEMBERVAL(RGBA8_SNORM,GL_RGBA8_SNORM),
    EMEMBERVAL(RGB10_A2,GL_RGB10_A2),
    EMEMBERVAL(RGB10_A2UI,GL_RGB10_A2UI),
    EMEMBERVAL(RGBA12,GL_RGBA12),
    EMEMBERVAL(RGBA16,GL_RGBA16),
    EMEMBERVAL(SRGB8,GL_SRGB8),
    EMEMBERVAL(SRGB8_ALPHA8,GL_SRGB8_ALPHA8),
    EMEMBERVAL(R16F,GL_R16F),
    EMEMBERVAL(RG16F,GL_RG16F),
    EMEMBERVAL(RGB16F,GL_RGB16F),
    EMEMBERVAL(RGBA16F,GL_RGBA16F),
    EMEMBERVAL(R32F,GL_R32F),
    EMEMBERVAL(RG32F,GL_RG32F),
    EMEMBERVAL(RGB32F,GL_RGB32F),
    EMEMBERVAL(RGBA32F,GL_RGBA32F),
    EMEMBERVAL(R11F_G11F_B10F,GL_R11F_G11F_B10F),
    EMEMBERVAL(RGB9_E5,GL_RGB9_E5),
    EMEMBERVAL(R8I,GL_R8I),
    EMEMBERVAL(R8UI,GL_R8UI),
    EMEMBERVAL(R16I,GL_R16I),
    EMEMBERVAL(R16UI,GL_R16UI),
    EMEMBERVAL(R32I,GL_R32I),
    EMEMBERVAL(R32UI,GL_R32UI),
    EMEMBERVAL(RG8I,GL_RG8I),
    EMEMBERVAL(RG8UI,GL_RG8UI),
    EMEMBERVAL(RG16I,GL_RG16I),
    EMEMBERVAL(RG16UI,GL_RG16UI),
    EMEMBERVAL(RG32I,GL_RG32I),
    EMEMBERVAL(RG32UI,GL_RG32UI),
    EMEMBERVAL(RGB8I,GL_RGB8I),
    EMEMBERVAL(RGB8UI,GL_RGB8UI),
    EMEMBERVAL(RGB16I,GL_RGB16I),
    EMEMBERVAL(RGB16UI,GL_RGB16UI),
    EMEMBERVAL(RGB32I,GL_RGB32I),
    EMEMBERVAL(RGB32UI,GL_RGB32UI),
    EMEMBERVAL(RGBA8I,GL_RGBA8I),
    EMEMBERVAL(RGBA8UI,GL_RGBA8UI),
    EMEMBERVAL(RGBA16I,GL_RGBA16I),
    EMEMBERVAL(RGBA16UI,GL_RGBA16UI),
    EMEMBERVAL(RGBA32I,GL_RGBA32I),
    EMEMBERVAL(RGBA32UI,GL_RGBA32UI)
);