include "common/debug.fbs";
include "common/resource.idl.fbs";
include "graphics/imgui.idl.fbs";
include "graphics/ui_internal.idl.fbs";

namespace prime.graphics;

enum WindowFlags : uint32 (bit_flags) {
    NoTitleBar,
    NoResize,
    NoMove,
    NoScrollbar,
    NoScrollWithMouse,
    NoCollapse,
    AlwaysAutoResize,
    NoBackground,
    NoSavedSettings,
    NoMouseInputs,
    MenuBar,
    HorizontalScrollbar,
    NoFocusOnAppearing,
    NoBringToFrontOnFocus,
    AlwaysVerticalScrollbar,
    AlwaysHorizontalScrollbar,
    AlwaysUseWindowPadding,
    NoNavInputs = 18,
    NoNavFocus,
    UnsavedDocument,
    NoDocking,
}

struct ImWindow {
    result:bool;
    border:bool;
    id:uint32;
    size:ImVec2(native_inline);
    flags:WindowFlags;
}

struct ImFormatArg {
    type:ImGuiDataType;
    variable:ImPointer(native_inline);
}

table ImFormat {
    fmt:string;
    args:[ImFormatArg];
}

table ImTextColored {
    color:ImVec4(native_inline);
    format:ImFormat;
}

table ImLabelText {
    label:string;
    format:ImFormat;
}

table ImButton {
    result:bool;
    label:string;
    size:ImVec2(native_inline);
}

table ImSmallButton {
    result:bool;
    label:string;
}

enum ButtonFlags : uint32 (bit_flags) {
    MouseButtonLeft,
    MouseButtonRight,
    MouseButtonMiddle,
}

table ImInvisibleButton {
    result:bool;
    strId:string;
    size:ImVec2(native_inline);
    flags:ButtonFlags;
}

enum Dir : int32 {
    Left,
    Right,
    Up,
    Down,
}

table ImArrowButton {
    result:bool;
    strId:string;
    dir:Dir;
}

struct ImImage {
    texture:uint32;
    size:ImVec2(native_inline);
    uv0:ImVec2(native_inline);
    uv1:ImVec2(native_inline);
    tint:ImVec4;
    boderColor:ImVec4;
}

struct ImImageButton {
    result:bool;
    image:ImImage;
    framePadding:int32;
}

table ImCheckbox {
    result:bool;
    label:string;
}

table ImCheckboxFlags {
    result:bool;
    label:string;
    mask:uint32;
    variable:ImPointer(native_inline);
}

table ImRadioButton {
    label:string;
    index:int32;
    variable:ImPointer(native_inline);
}

table ImProgressBar {
    fraction:float;
    size:ImVec2(native_inline);
    overlay:string;
}

union FunctionPayload {
    window:ImWindow,
    text:ImFormat,
    textColored:ImTextColored,
    textDisabled:ImFormat,
    textWrapped:ImFormat,
    bulletText:ImFormat,
    labelText:ImLabelText,
    button:ImButton,
    smallButton:ImSmallButton,
    invisibleButton:ImInvisibleButton,
    arrowButton:ImArrowButton,
    image:ImImage,
    imageButton:ImImageButton,
    checkbox:ImCheckbox,
    checkboxFlags:ImCheckboxFlags,
    radioButton:ImRadioButton,
    progressBar:ImProgressBar,
}

table Function {
    signature:ImSignature(native_inline);
    payload:FunctionPayload;
}

struct VariableDescription {
    type: ImGuiDataType;
    numElements: uint8;
    stackId:uint16;
    hash:uint32 (key);
    ptr:ImPointer;
}

table VariablePool {
    var64:[uint64];
    var32:[uint32];
    floats:[float];
    bools:[bool];
}

table Debug {
    localVarDescs:[VariableDescription];
    context:UIFrameCtx (native_inline);
    stackNames:[string];
}

table UIFrame {
    meta:common.Resource(required, native_inline);
    stack:[Function];
    globalVars:[VariableDescription];
    varPool:VariablePool;
    textures:[uint32];
    debug:Debug;
    debugInfo:common.DebugInfo;
}

root_type UIFrame;
