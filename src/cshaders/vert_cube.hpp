#include "point_light.hpp"
#include "position.hpp"

constexpr int numVertices = 36;

vec3 TransformTSNormal(vec3 point) {
  if constexpr (ts_feats.useTangent) {
    // clang-format off
    const vec4 tangents[numVertices] = {{1E-25, -0, -0.707107, 0.707107}, {1E-25, -0, -0.707107, 0.707107}, {1E-25, -0, -0.707107, 0.707107}, {0.707107, 0.707107, -0, -0}, {0.707107, 0.707107, -0, -0}, {0.707107, 0.707107, -0, -0}, {0.707107, 0, -0.707107, -0}, {0.707107, 0, -0.707107, -0}, {0.707107, 0, -0.707107, -0}, {1, 0, -0, -0}, {1, 0, -0, -0}, {1, 0, -0, -0}, {0.707107, 0, 0.707107, -0}, {0.707107, 0, 0.707107, -0}, {0.707107, 0, 0.707107, -0}, {1E-25, -0, -1, -0}, {1E-25, -0, -1, -0}, {1E-25, -0, -1, -0}, {1E-25, -0, -0.707107, 0.707107}, {1E-25, -0, -0.707107, 0.707107}, {1E-25, -0, -0.707107, 0.707107}, {0.707107, 0.707107, -0, -0}, {0.707107, 0.707107, -0, -0}, {0.707107, 0.707107, -0, -0}, {0.707107, 0, -0.707107, -0}, {0.707107, 0, -0.707107, -0}, {0.707107, 0, -0.707107, -0}, {1, 0, -0, -0}, {1, 0, -0, -0}, {1, 0, -0, -0}, {0.707107, 0, 0.707107, -0}, {0.707107, 0, 0.707107, -0}, {0.707107, 0, 0.707107, -0}, {1E-25, -0, -1, -0}, {1E-25, -0, -1, -0}, {1E-25, -0, -1, -0}};
    // clang-format on
    return TransformTQNormal(tangents[gl_VertexID], point);
  }

  return point;
}

void vertex() {
  // clang-format off
const vec3 positions[numVertices] = {{1, -1, 1}, {-1, -1, 1}, {-1, -1, -1}, {1, 1, -1}, {-1, 1, -1}, {-1, 1, 1}, {1, 1, -1}, {1, 1, 1}, {1, -1, 1}, {1, -1, 1}, {1, 1, 1}, {-1, 1, 1}, {-1, 1, 1}, {-1, 1, -1}, {-1, -1, -1}, {1, 1, -1}, {1, -1, -1}, {-1, -1, -1}, {1, -1, -1}, {1, -1, 1}, {-1, -1, -1}, {1, 1, 1}, {1, 1, -1}, {-1, 1, 1}, {1, -1, -1}, {1, 1, -1}, {1, -1, 1}, {-1, -1, 1}, {1, -1, 1}, {-1, 1, 1}, {-1, -1, 1}, {-1, 1, 1}, {-1, -1, -1}, {-1, 1, -1}, {1, 1, -1}, {-1, -1, -1}};
const vec2 uv[numVertices] = {{0, 1}, {1, 1}, {1, 0}, {1, 0}, {0, 0}, {0, 1}, {1, 0}, {0, 0}, {0, 1}, {1, 1}, {1, 0}, {0, 0}, {1, 0}, {0, 0}, {0, 1}, {0, 0}, {0, 1}, {1, 1}, {0, 0}, {0, 1}, {1, 0}, {1, 1}, {1, 0}, {0, 1}, {1, 1}, {1, 0}, {0, 1}, {0, 1}, {1, 1}, {0, 0}, {1, 1}, {1, 0}, {0, 1}, {1, 0}, {0, 0}, {1, 1}};
  // clang-format on

  vec3 modelSpace = GetModelSpace(vec4(positions[gl_VertexID], 0));

  static vec2 psTexCoord[1];

  if constexpr (NUM_POINTLIGHTS > 0) {
    VertexPointLight(modelSpace);
  }

  SetPosition(modelSpace);
  psTexCoord[0] = uv[gl_VertexID];
}
